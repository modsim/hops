#define BOOST_TEST_MODULE TruncatedGaussianProposalTestSuite
#define BOOST_TEST_DYN_LINK

#include <boost/test/included/unit_test.hpp>
#include <chrono>
#include <Eigen/Core>

#include "hops/MarkovChain/Draw/MetropolisHastingsFilter.hpp"
#include "hops/MarkovChain/MarkovChainAdapter.hpp"
#include "hops/MarkovChain/ModelWrapper.hpp"
#include "hops/MarkovChain/Proposal/TruncatedGaussianProposal.hpp"
#include "hops/Model/Gaussian.hpp"
#include "hops/RandomNumberGenerator/RandomNumberGenerator.hpp"
#include "hops/Statistics/EffectiveSampleSize.hpp"

BOOST_AUTO_TEST_SUITE(TruncatedGaussianProposal)

    BOOST_AUTO_TEST_CASE(DimensionNames) {
        const long rows = 2;
        const long cols = 1;
        Eigen::MatrixXd A(rows, cols);
        A << 1, -1;
        Eigen::VectorXd b = 1000 * Eigen::VectorXd::Ones(rows);
        Eigen::VectorXd interiorPoint(cols);
        for (size_t i = 0; i < cols; ++i) {
            interiorPoint(i) = 0;
        }

        auto model = std::make_shared<hops::Gaussian>(interiorPoint, Eigen::MatrixXd::Identity(cols, cols));
        auto gaussian = hops::Gaussian(interiorPoint, Eigen::MatrixXd::Identity(cols, cols));

        auto proposer = hops::TruncatedGaussianProposal(A,
                                                        b,
                                                        interiorPoint,
                                                        gaussian);

        std::vector<std::string> expectedNames = {"x_0"};
        auto actualNames = proposer.getDimensionNames();

        BOOST_CHECK_EQUAL(actualNames.size(), expectedNames.size());
        for (size_t i = 0; i < expectedNames.size(); ++i) {
            BOOST_CHECK_EQUAL(actualNames[i], expectedNames[i]);
        }

        expectedNames = std::vector<std::string>{"y_1"};
        proposer.setDimensionNames(expectedNames);
        actualNames = proposer.getDimensionNames();

        BOOST_CHECK_EQUAL(actualNames.size(), expectedNames.size());
        for (size_t i = 0; i < expectedNames.size(); ++i) {
            BOOST_CHECK_EQUAL(actualNames[i], expectedNames[i]);
        }

    }

    BOOST_AUTO_TEST_CASE(GaussianInCube) {
        const long rows = 6;
        const long cols = 3;
        Eigen::MatrixXd A(rows, cols);
        A << 1, 0, 0,
                0, 1, 0,
                0, 0, 1,
                -1, 0, 0,
                0, -1, 0,
                0, 0, -1;
        Eigen::VectorXd b(rows);
        b << 1, 1, 1, 1, 1, 1;
        Eigen::VectorXd interiorPoint(cols);
        for (size_t i = 0; i < cols; ++i) {
            interiorPoint(i) = 0;
        }

        auto model = hops::Gaussian(interiorPoint, Eigen::MatrixXd::Identity(cols, cols));


        long max_reflections = 10;
        hops::TruncatedGaussianProposal proposer(A,
                                                 b,
                                                 interiorPoint,
                                                 model);

        hops::RandomNumberGenerator randomNumberGenerator(42);
        auto t1 = std::chrono::high_resolution_clock::now();
        for (int i = 0; i < 100; ++i) {
            Eigen::VectorXd proposal = proposer.propose(randomNumberGenerator);
            double acceptanceChance = proposer.computeLogAcceptanceProbability();
            BOOST_CHECK(((b - A * proposal).array() >= 0).all());
            BOOST_CHECK(std::exp(acceptanceChance) >= 0);
            proposer.acceptProposal();
        }
        auto t2 = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double, std::milli> ms_double = t2 - t1;

        BOOST_CHECK(proposer.getModel() != nullptr);
    }


    BOOST_AUTO_TEST_CASE(GaussianInWideCubeHasCorrectStd) {
        const long rows = 2;
        const long cols = 1;
        Eigen::MatrixXd A(rows, cols);
        A << 1, -1;
        Eigen::VectorXd b = 1000 * Eigen::VectorXd::Ones(rows);
        Eigen::VectorXd interiorPoint(cols);
        for (size_t i = 0; i < cols; ++i) {
            interiorPoint(i) = 0;
        }

        auto model = std::make_shared<hops::Gaussian>(interiorPoint, Eigen::MatrixXd::Identity(cols, cols));
        auto gaussian = hops::Gaussian(interiorPoint, Eigen::MatrixXd::Identity(cols, cols));

        auto mc = hops::MarkovChainAdapter(
                hops::MetropolisHastingsFilter(
                        hops::TruncatedGaussianProposal(A,
                                                        b,
                                                        interiorPoint,
                                                        gaussian)
                )
        );

        hops::RandomNumberGenerator randomNumberGenerator(42);
        std::vector<Eigen::VectorXd> samples;
        double num_samples = 50'000;
        Eigen::VectorXd sample_sum = Eigen::VectorXd::Zero(1);
        for (int i = 0; i < num_samples; ++i) {
            auto[alpha, state] = mc.draw(randomNumberGenerator);
            samples.emplace_back(state);
            sample_sum += state;
        }

        double mean = sample_sum(0) / samples.size();


        double ess = hops::computeEffectiveSampleSize(std::vector<decltype(samples)>{samples}, 0);
        double standardErrorOfMean = 1. / std::sqrt(ess);
        double sq_sum = 0;
        for (const auto &s:samples) {
            sq_sum += (s(0) - mean) * (s(0) - mean);
        }
        double stdev = std::sqrt(sq_sum / (samples.size() - 1));

        BOOST_CHECK(std::abs(mean - model->getMean()(0)) < 2 * standardErrorOfMean);
        BOOST_CHECK_CLOSE(stdev, 1., 1);
    }

    BOOST_AUTO_TEST_CASE(OtherGaussianInWideCubeHasCorrectStd) {
        const long rows = 2;
        const long cols = 1;
        Eigen::MatrixXd A(rows, cols);
        A << 1, -1;
        Eigen::VectorXd b = 1000 * Eigen::VectorXd::Ones(rows);
        Eigen::VectorXd interiorPoint(cols);
        for (size_t i = 0; i < cols; ++i) {
            interiorPoint(i) = 5;
        }

        auto model = std::make_shared<hops::Gaussian>(interiorPoint, Eigen::MatrixXd::Identity(cols, cols));
        auto gaussian = hops::Gaussian(interiorPoint, 0.3 * Eigen::MatrixXd::Identity(cols, cols));

        auto mc = hops::MarkovChainAdapter(
                hops::MetropolisHastingsFilter(
                        hops::TruncatedGaussianProposal(A,
                                                        b,
                                                        interiorPoint,
                                                        gaussian)
                )
        );

        hops::RandomNumberGenerator randomNumberGenerator(42);
        std::vector<Eigen::VectorXd> samples;
        double num_samples = 50'000;
        Eigen::VectorXd sample_sum = Eigen::VectorXd::Zero(1);
        for (int i = 0; i < num_samples; ++i) {
            auto[alpha, state] = mc.draw(randomNumberGenerator);
            samples.emplace_back(state);
            sample_sum += state;
        }

        double mean = sample_sum(0) / samples.size();


        double ess = hops::computeEffectiveSampleSize(std::vector<decltype(samples)>{samples}, 0);
        double standardErrorOfMean = 1. / std::sqrt(ess);
        double sq_sum = 0;
        for (const auto &s:samples) {
            sq_sum += (s(0) - mean) * (s(0) - mean);
        }
        double stdev = std::sqrt(sq_sum / (samples.size() - 1));

        BOOST_CHECK(std::abs(mean - model->getMean()(0)) < 2 * standardErrorOfMean);
        BOOST_CHECK_CLOSE(stdev, std::sqrt(0.3), 1);
    }

    BOOST_AUTO_TEST_CASE(Other2DGaussianInWideCubeHasCorrectStd) {
        const long rows = 4;
        const long cols = 2;
        Eigen::MatrixXd A(rows, cols);
        A << 1, 0, 0, 1, -1, 0, 0, -1;
        Eigen::VectorXd b = 1000 * Eigen::VectorXd::Ones(rows);
        Eigen::VectorXd interiorPoint(cols);
        for (size_t i = 0; i < cols; ++i) {
            interiorPoint(i) = 5;
        }

        auto model = std::make_shared<hops::Gaussian>(interiorPoint, Eigen::MatrixXd::Identity(cols, cols));
        double expected_std = 0.5;
        auto gaussian = hops::Gaussian(interiorPoint,
                                       std::pow(expected_std, 2) * Eigen::MatrixXd::Identity(cols, cols));

        auto mc = hops::MarkovChainAdapter(
                hops::MetropolisHastingsFilter(
                        hops::TruncatedGaussianProposal(A,
                                                        b,
                                                        interiorPoint,
                                                        gaussian)
                )
        );

        hops::RandomNumberGenerator randomNumberGenerator(42);
        std::vector<Eigen::VectorXd> samples;
        double num_samples = 50'000;
        Eigen::VectorXd sample_sum = Eigen::VectorXd::Zero(cols);
        for (int i = 0; i < num_samples; ++i) {
            auto[alpha, state] = mc.draw(randomNumberGenerator);
            samples.emplace_back(state);
            sample_sum += state;
        }

        long col = 0;
        double mean = sample_sum(col) / samples.size();

        double ess = hops::computeEffectiveSampleSize(std::vector<decltype(samples)>{samples}, col);
        double standardErrorOfMean = expected_std / std::sqrt(ess);
        double sq_sum = 0;
        for (const auto &s:samples) {
            sq_sum += (s(col) - mean) * (s(col) - mean);
        }
        double stdev = std::sqrt(sq_sum / (samples.size() - 1));

        BOOST_CHECK(std::abs(mean - model->getMean()(col)) < 2 * standardErrorOfMean);
        BOOST_CHECK_CLOSE(stdev, expected_std, 1);
    }

    BOOST_AUTO_TEST_CASE(AntonsProblemDoesNotProduceNaNs) {
        const long rows = 8;
        const long cols = 2;
        Eigen::MatrixXd A(rows, cols);
        A << -1., 0., 0., -1., 1., 0., 0., 1., 1., -1., 1., -1., 1., -1., 1., -1.;

        Eigen::VectorXd b(rows);
        b << 0., 0., 5., 5., 0., 0., 0., -0.;

        Eigen::VectorXd interiorPoint(cols);
        interiorPoint << 0.6, 1.0;
        Eigen::MatrixXd cov(cols, cols);
        cov << 0.0001, 0., 0., 0.0001;

        hops::Gaussian model(interiorPoint, cov);

        auto mc = hops::MarkovChainAdapter(
                hops::MetropolisHastingsFilter(
                        hops::TruncatedGaussianProposal(A,
                                                        b,
                                                        interiorPoint,
                                                        model)
                )
        );

        hops::RandomNumberGenerator randomNumberGenerator(42);
        double num_samples = 10'000;
        for (int i = 0; i < num_samples; ++i) {
            auto[alpha, state] = mc.draw(randomNumberGenerator);
            BOOST_CHECK(std::isfinite(state(0)));
            BOOST_CHECK(std::isfinite(state(1)));
        }
    }

    BOOST_AUTO_TEST_CASE(AntonsProblemDoesNotProduceNaNs2) {
        const long rows = 8;
        const long cols = 2;
        Eigen::MatrixXd A(rows, cols);
        A << -1., 0., 0., -1., 1., 0., 0., 1., 1., -1., 1., -1., 1., -1., 1., -1.;

        Eigen::VectorXd b(rows);
        b << 0., 0., 5., 5., 0., 0., 0., -0.;

        Eigen::VectorXd mean(cols);
        mean << 0.6, 1.0;
        Eigen::MatrixXd cov(cols, cols);
        cov << 0.0001, 0., 0., 0.0001;

        hops::Gaussian model(mean, cov);

        Eigen::VectorXd interiorPoint(cols);
        interiorPoint << 1.46, 3.54;

        auto mc = hops::MarkovChainAdapter(
                hops::MetropolisHastingsFilter(
                        hops::TruncatedGaussianProposal(A,
                                                        b,
                                                        interiorPoint,
                                                        model)
                )
        );

        hops::RandomNumberGenerator randomNumberGenerator(42);
        double num_samples = 10'000;
        for (int i = 0; i < num_samples; ++i) {
            auto[alpha, state] = mc.draw(randomNumberGenerator);
            BOOST_CHECK(std::isfinite(state(0)));
            BOOST_CHECK(std::isfinite(state(1)));
        }
    };

    BOOST_AUTO_TEST_CASE(GaussianOnCrown) {
        const long rows = 71;
        const long cols = 33;
        Eigen::MatrixXd A(rows, cols);
        A
                << 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.004649304170798833, 0.002905815106749153, 0.036032107323689944, -0.00464930417079877, 0.01569140157644569, 0.011042097405647091, 0.007555119277548032, 0.9991104762947243, 0.0017434890640495007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001947265074414693, -0.0038945301488291836, -0.031156241190633597, 0.0019472650744146304, -0.0038945301488291575, -0.0019472650744146714, -0.0058417952232439245, -0.999474692009858, 0.0019472650744146438, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8893911304210653, 0.0, 2.0674158821777457e-16, 2.0674158821777457e-16, -2.815697003712228e-16, -0.4571470410364039, -3.6565489856427295e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004649304170798833, -0.002905815106749153, -0.036032107323689944, 0.00464930417079877, -0.01569140157644569, -0.011042097405647091, -0.007555119277548032, -0.9991104762947243, -0.0017434890640495007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0019739090275760055, 0.003947818055151801, 0.03158254444121455, -0.0019739090275759383, 0.003947818055151774, 0.0019739090275759873, 0.005921727082727848, 0.9994602144321636, -0.001973909027575959, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0038988342905037633, -0.005068484577654937, -0.031970441182131173, -0.0038988342905038297, -0.005068484577654909, -0.00038988342905045076, -0.0011696502871512016, -0.9994470660826273, 0.00038988342905042496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.009723753394068611, 0.0016206255656780369, 0.04861876697034242, -0.009723753394068545, 0.0016206255656780106, 0.02755063461652758, 0.011344378959746665, 0.9978953301895789, -0.02755063461652755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012579433320089302, 0.004402801662031462, 0.03522241329625181, 0.0012579433320089968, 0.0044028016620314345, 0.005660744994040584, 0.0031448583300225596, 0.9993215044379329, -0.005660744994040556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001887786594587722, 0.0037755731891752384, 0.0405874117836341, 0.008495039675644406, 0.003775573189175211, 0.012270612864819763, -0.00471946648646907, 0.99903554372172, -0.001887786594587669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0015403678157465547, -0.005391287355113131, -0.03465827585429874, -0.0015403678157466193, -0.0053912873551131045, -0.006931655170859865, 0.004621103447239826, -0.999308999362167, 0.006931655170859834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.099773886580268e-17, 0.00465753722162734, 0.03726029777301885, -4.897945276185122e-18, 0.004657537221627312, 0.004657537221627448, -0.004657537221627345, 0.999251323214041, -0.004657537221627418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0018375207648635991, -0.003675041529727006, -0.039506696444565566, 0.0018375207648635302, -0.0036750415297269806, -0.011943884971612993, -0.005512562294590628, -0.9990444209297913, 0.011943884971612955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0;


        Eigen::VectorXd b(rows);
        b
                << 76.8, 25.16435882444815, -11.878316953929096, 3.801576666929825e-13, -12.378772354751577, 12.040845068213086, -11.813467900226557, 14.747692647670545, 12.390741820288618, 11.515498226984569, -11.783813790461597, 11.643843054068407, -12.219513086342388, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0;

        Eigen::VectorXd mean(cols);
        mean
                << 36.74582254292023, 58.68652575133536, 450.56732131971626, 66.84060856798071, 0.16608918936891398, 26.265200289291688, 10.91703526750099, 114.0299659624998, 7.5685883556940645, 27.027906683238317, 91.9510960128302, 6.580838264785891, 0.04184919990555292, 29.187747454831005, 2.6058869562337796, 130.2656549447792, 615.5309597073141, 76.96016658293867, 217.46032476073123, 999.9553064966971, 19.513896426738665, 62.01525061811233, 4.145295944606681, 158.30713461768553, 3.771093142564075, 1.9187910909653751, 54.59934114515276, 158.08387272705528, 4.772069799289154, 0.21289563040922233, 114.76247359381667, -0.044578981936953824, 94.34826166521758;

        Eigen::MatrixXd cov(cols, cols);
        cov
                << 1.0451292197570157, -0.015409434049944735, 0.01510169794065632, 0.004251448826319853, 0.00878733408410421, -0.013724418259531206, -0.015395651753540112, 0.0134306648919631, -0.007431650056086356, 0.010368634136531526, 0.024331821930083847, 0.02325860053320952, -0.012582117375551906, 0.024189790449174957, 0.03901625877812792, -0.028894538306109836, 0.016332697846277982, -0.028827537016960555, 0.02200723941225758, 0.008038833183089915, 0.03560080108560455, -0.002754296903856515, -0.01062262537476499, 0.003991678192911777, 0.026992438670856583, 0.001465245336167191, 0.03191514132215131, 0.015801417256640773, -0.038754651637463555, 0.0005855890202716126, -0.011992800048999745, 0.007974129659104358, 0.03351051362261738, -0.015409434049944735, 1.040104467108814, -0.014592063194465267, -0.017347767846721252, -0.015504225168362301, 0.005063770198704643, 0.017871490389801403, -0.014994256410291227, -0.0019789912740975357, -0.013744404014536384, -0.0022989272205138846, 0.020929691637571732, 0.007811287433449491, 0.02412573932532814, 0.02428025989635926, -0.022512945304902277, -0.006392550652567025, 0.016555773312958908, -0.016052879962395312, -0.01404881369780568, -0.007721180337854255, -0.008373504214850705, 0.001145057395861743, -0.01900809203592703, -0.0003557836132164896, 0.02266696183829913, 0.03413508950052036, -0.020393686798330746, 0.02810216065871144, -0.006367785344653989, -0.017746023074299448, -0.007003904227375312, 0.009180042903472513, 0.01510169794065632, -0.014592063194465267, 1.0366402613489967, 0.01613599163831003, 0.009023853315700806, -0.016004619214787408, -0.015032945790150062, 0.018652766421574145, -0.01348380499700605, 0.015774487839676266, 0.015873920068812705, -0.0036956861149572127, -0.013892304646654642, -0.022852259647375365, -0.024038772996518177, -0.0015319608941603338, 0.013947506517285692, 0.00483664496990135, 0.0100268682002563, 0.013976327141935281, 0.013563589153354979, 0.020497930633204542, -0.010423063173181922, 0.01578834275991937, 0.017698004903454755, -0.004925178719709463, 0.018052309614998967, 0.0005365990987257105, 0.013555768477740818, -0.012460031956474181, 0.009518363727390114, 0.015297232755580283, -0.016516601672160795, 0.004251448826319853, -0.017347767846721252, 0.01613599163831003, 1.016941618307346, 0.007432103344095377, -0.00459051127193742, -0.018724891759026113, 0.017547780264646304, 0.0005510481058150206, 0.017355011534759546, -0.005457460675769054, -0.004897573226903225, -0.004440063651251066, -0.010214721095223072, 0.012186326903571408, -0.02019162242993095, 0.011962030302697851, -0.02673393092132513, 0.0096104048905598, 0.010410179041192076, -0.001931778703755557, 0.011541734350234808, -0.02655963396459424, 0.016463073917441458, 0.012716779014912114, -0.004439251365028131, -0.004097837456739825, 0.030781007948951788, 0.010341041029588093, 0.004400521895359284, -0.004485837429479993, 0.0012148709404703024, 0.03648965918942879, 0.00878733408410421, -0.015504225168362301, 0.009023853315700806, 0.007432103344095377, 1.077653841471607, -0.036396034101590195, -0.023994473945841612, -0.018685306774751456, -0.03508023538954277, 0.02243951437967856, -0.022890914057067103, -0.005939819013824181, -0.014609290830216906, -0.04687657129697044, -0.025295589248601747, 0.0059876503117463, 0.005254969436767958, -0.027741987712798566, 0.0037618733669754333, 0.01360525838438496, -0.039446178357127985, 0.003935372818970251, -0.041768533875756644, 0.0028265710597574667, 0.0441580769795837, 0.04449482260856929, 0.027269247064219914, -0.01066994238434305, 0.00414563519633471, -0.03952534636829865, 0.03088529602551772, 0.03193607221056624, -0.03908805799055766, -0.013724418259531206, 0.005063770198704643, -0.016004619214787408, -0.00459051127193742, -0.036396034101590195, 1.0923415141033241, 0.04635422047442621, 0.047346022394376866, 0.04904896874541298, -0.04524791438574915, -0.004487105873426588, 0.021696151009921918, 0.030644741819180452, -0.014837136894539572, 0.02713948994127957, -0.012338731203510913, 0.0009514172462295948, -0.0036477656467035114, -0.04746700407096419, -0.039195733160810646, -0.0027636699462217137, 0.004704572144335838, 0.04509977033320344, 0.02116836827741894, -0.04304892857723624, -0.032298973880251367, -0.026355833159226207, -0.020751593936883726, 0.02659604243989747, 0.045591904604812473, 0.03146674243923933, -0.049150203367552575, -0.03044244302633583, -0.015395651753540112, 0.017871490389801403, -0.015032945790150062, -0.018724891759026113, -0.023994473945841612, 0.04635422047442621, 1.0959001038680498, 0.03114831910961378, 0.05329048558741863, -0.04703615576832975, -0.01401234741164253, 0.016338297752980836, 0.03936757168047451, -0.010336131769797524, 0.030401668429622945, 0.014091869251060408, -0.009812136715202438, -0.007577208432970429, 0.002599700347369389, -0.01852597978600133, -0.008058553381260151, -0.030837746017004248, 0.04996670863541165, -0.005791998504288229, -0.04036942251863751, 0.012369779931064171, 0.019968664950621013, 0.0025662618102064907, 0.023556328928534955, 0.04862276595617193, 0.0368591861899902, -0.05375573996100676, -0.04308733943205684, 0.0134306648919631, -0.014994256410291227, 0.018652766421574145, 0.017547780264646304, -0.018685306774751456, 0.047346022394376866, 0.03114831910961378, 1.0559569938740838, -0.009006036634530559, 0.016893319332057632, -0.011939185059907506, -0.00019050676893481194, -0.014675720176445509, 0.014364199451818644, -0.019487745275265013, -0.029937824505099037, 0.0037384685070864254, -0.0019546629062522016, 0.009803445234383827, 0.008546391891116363, 0.02379227619056568, -0.005398266625524906, -0.022066737259668515, 0.023148107035130403, -0.020554948819090407, -0.031820179647955936, 0.030011148263626188, 0.03765123812365831, -0.03408042706432178, -0.037471871915213784, 0.017442693715043305, 0.014670346083215154, 0.039962281457526616, -0.007431650056086356, -0.0019789912740975357, -0.01348380499700605, 0.0005510481058150206, -0.03508023538954277, 0.04904896874541298, 0.05329048558741863, -0.009006036634530559, 0.9558305571932898, -0.005430678801863821, -0.010364394042590912, -0.012890678148467982, 0.004394223040950506, -0.0019434424823618025, -0.009177151174516104, 0.0024545247045125143, -0.011657713282384886, -0.0016958982086585266, 0.0018378206759580653, -0.012134353559748436, -0.028516558964406087, -0.003775309586013237, -0.007167158118193257, -0.008649233798873085, 0.012286390903939988, 0.011461035531280675, 0.002639897953416871, -0.027911277372101344, -0.007345242684685044, -0.004066718016894244, -0.018423159653141275, 0.015509827704018089, -0.030363216654919242, 0.010368634136531526, -0.013744404014536384, 0.015774487839676266, 0.017355011534759546, 0.02243951437967856, -0.04524791438574915, -0.04703615576832975, 0.016893319332057632, -0.005430678801863821, 1.089430411796347, -0.013354487497796308, -0.015018115714963776, -0.040650949228871795, 0.01566546239756756, -0.0304198208338072, 0.009388003469610795, 0.005101933553223362, -0.04392232546640775, 0.009254481628189941, 0.01780417163889549, -0.024372446102850685, 0.015979583071079367, -0.04578757511185807, 0.0018272616482163883, 0.02565877439835006, -0.030201209299937214, -0.025968917517985426, -0.020795081379056887, -0.02680273415802167, -0.040855208130067384, 0.036971895593493335, 0.05419721634911037, -0.012402277227661523, 0.024331821930083847, -0.0022989272205138846, 0.015873920068812705, -0.005457460675769054, -0.022890914057067103, -0.004487105873426588, -0.01401234741164253, -0.011939185059907506, -0.010364394042590912, -0.013354487497796308, 1.0993774921638093, 0.044235434854132547, -0.045953845684206004, -0.015577667739301318, -0.01567625277182229, -0.026829059840669117, 0.016200806009429185, -0.015827607002697225, -0.00215689326269418, 0.017820986332501787, 0.028202675235625314, 0.022258387237330323, 0.0007582486630868411, 0.004110997042733021, 0.03453087968495973, -0.038886156890715645, 0.04277442752917602, -0.01445564772838424, 0.0322982821968645, -0.03352031341643597, 0.03982225451870097, 0.043462507654258346, -0.02806785861635476, 0.02325860053320952, 0.020929691637571732, -0.0036956861149572127, -0.004897573226903225, -0.005939819013824181, 0.021696151009921918, 0.016338297752980836, -0.00019050676893481194, -0.012890678148467982, -0.015018115714963776, 0.044235434854132547, 1.094581625534777, 0.02870351381180925, 0.03564563145528519, -0.02805829141177305, -0.04305211728124619, 0.03336651213421017, 0.03069223039204365, -0.02818449044781458, 0.003592995742556512, -0.031832735747521865, -0.009358268714636336, -0.024614272831547695, 0.0360093392220409, -0.005815542055064995, 0.027110271482892634, 0.01385506217807305, 0.04083263513574747, -0.04306046355568722, 0.03180289830669866, -0.01912282640823651, 0.01996718268764309, 0.04002891645538309, -0.012582117375551906, 0.007811287433449491, -0.013892304646654642, -0.004440063651251066, -0.014609290830216906, 0.030644741819180452, 0.03936757168047451, -0.014675720176445509, 0.004394223040950506, -0.040650949228871795, -0.045953845684206004, 0.02870351381180925, 1.0965394322005673, -0.033970411645025386, 0.025303305668058027, -0.04098592131785019, 0.0033910905978010958, -0.02920391736560105, 0.03231430162830998, -0.04990592130930023, 0.016051688403126773, 0.016586828862949734, 0.050038045502453374, 0.03941031669348979, -0.03471954626885602, 0.04136170444063684, 0.031249232960788607, 0.03989096618788913, 0.04403429888837729, 0.05029573059747787, 0.044933930411813525, -0.052801366965945014, -0.03202177489169103, 0.024189790449174957, 0.02412573932532814, -0.022852259647375365, -0.010214721095223072, -0.04687657129697044, -0.014837136894539572, -0.010336131769797524, 0.014364199451818644, -0.0019434424823618025, 0.01566546239756756, -0.015577667739301318, 0.03564563145528519, -0.033970411645025386, 1.1001124402908622, -0.03811703031944088, -0.023689101858857232, 0.041534170552833004, 0.04061342894305865, 0.028545870022204798, 0.04844049803743784, 0.0355849536989298, -0.036209937856077686, -0.007244249358861834, 0.034697723667848436, -0.010796863193762008, -0.03470602305483192, -0.01938421213109109, -0.018242749745817282, -0.04316161464510363, -0.027782664771231234, -0.046846579080942224, 0.03956237956187793, -0.02771963040684473, 0.03901625877812792, 0.02428025989635926, -0.024038772996518177, 0.012186326903571408, -0.025295589248601747, 0.02713948994127957, 0.030401668429622945, -0.019487745275265013, -0.009177151174516104, -0.0304198208338072, -0.01567625277182229, -0.02805829141177305, 0.025303305668058027, -0.03811703031944088, 1.1024415690197311, -0.037091346426550376, -0.036034312515543954, -0.032641555003770306, -0.035520670850407186, 0.03701837975831227, 0.0444584005407413, -0.007069813564889092, 0.010234494432862005, 0.02460185162389984, 0.037994492545985324, 0.03003548432464611, 0.030345740730211505, 0.041242097052525226, 0.04387822506403151, -0.021844028115744235, -0.018593918359548715, 0.0058817200023349074, 0.045363376126235755, -0.028894538306109836, -0.022512945304902277, -0.0015319608941603338, -0.02019162242993095, 0.0059876503117463, -0.012338731203510913, 0.014091869251060408, -0.029937824505099037, 0.0024545247045125143, 0.009388003469610795, -0.026829059840669117, -0.04305211728124619, -0.04098592131785019, -0.023689101858857232, -0.037091346426550376, 1.1002251060276769, -0.01203612766588537, 0.034770295219234214, 0.02952307168426001, 0.015787983132914653, -0.02921326657235672, 0.018769228691789833, 0.0016795204060041377, 0.030092280151602535, -0.01013150777529086, -0.031109091958393946, 0.03343989667589811, 0.02731888661866346, 0.04002496218479192, -0.0178864176645816, 0.032752891116691864, 0.039339636455326926, 0.03040188472251433, 0.016332697846277982, -0.006392550652567025, 0.013947506517285692, 0.011962030302697851, 0.005254969436767958, 0.0009514172462295948, -0.009812136715202438, 0.0037384685070864254, -0.011657713282384886, 0.005101933553223362, 0.016200806009429185, 0.03336651213421017, 0.0033910905978010958, 0.041534170552833004, -0.036034312515543954, -0.01203612766588537, 1.0365430410540053, 0.0025249355311603846, 0.032313979943349794, 0.008845153015478101, -0.012188115519191323, 0.015776163172738607, -0.03671398357119572, 0.0069029610694028715, -0.028104499976935073, 0.03328507491844352, 0.022665188428897233, 0.0045426957390751746, -0.012470789580005071, 0.024913728365545125, -0.028394969552942472, 0.035346375921318104, 0.039300477151426295, -0.028827537016960555, 0.016555773312958908, 0.00483664496990135, -0.02673393092132513, -0.027741987712798566, -0.0036477656467035114, -0.007577208432970429, -0.0019546629062522016, -0.0016958982086585266, -0.04392232546640775, -0.015827607002697225, 0.03069223039204365, -0.02920391736560105, 0.04061342894305865, -0.032641555003770306, 0.034770295219234214, 0.0025249355311603846, 1.1005602379812536, -0.02584820815748407, 0.020481122418613943, -0.045623323906724536, 0.027060084585804264, -0.04388788034686903, 0.045545541999137025, 0.027054364810051548, -0.040011339291041566, 0.03355911255626865, -0.028428671678423244, -0.030653098363687886, -0.03531254690762554, 0.037509161544747864, 0.039510778328411295, -0.036318121741049, 0.02200723941225758, -0.016052879962395312, 0.0100268682002563, 0.0096104048905598, 0.0037618733669754333, -0.04746700407096419, 0.002599700347369389, 0.009803445234383827, 0.0018378206759580653, 0.009254481628189941, -0.00215689326269418, -0.02818449044781458, 0.03231430162830998, 0.028545870022204798, -0.035520670850407186, 0.02952307168426001, 0.032313979943349794, -0.02584820815748407, 1.1020191203841525, 0.005690216716755554, 0.029843339338222672, 0.03482058176282983, 0.004632400659007064, -0.0033323023025640447, 0.031277036167648486, 0.04013846721174865, 0.038040192747288114, -0.007769954525265398, 0.036950273135133826, 0.02887196875203289, 0.032107422417384575, -0.0301183560296715, 0.012261712797160016, 0.008038833183089915, -0.01404881369780568, 0.013976327141935281, 0.010410179041192076, 0.01360525838438496, -0.039195733160810646, -0.01852597978600133, 0.008546391891116363, -0.012134353559748436, 0.01780417163889549, 0.017820986332501787, 0.003592995742556512, -0.04990592130930023, 0.04844049803743784, 0.03701837975831227, 0.015787983132914653, 0.008845153015478101, 0.020481122418613943, 0.005690216716755554, 1.0358864536022092, 0.014468163620196619, 0.01712497139204919, -0.039611479375910794, 0.013445337746708018, 0.02163138058950182, -0.019306731187669103, 0.010991105715902552, 0.004225755130927113, -0.04191127195725435, -0.030630844016381484, -0.007630331061892353, 0.053979394171471906, 0.018102760524646617, 0.03560080108560455, -0.007721180337854255, 0.013563589153354979, -0.001931778703755557, -0.039446178357127985, -0.0027636699462217137, -0.008058553381260151, 0.02379227619056568, -0.028516558964406087, -0.024372446102850685, 0.028202675235625314, -0.031832735747521865, 0.016051688403126773, 0.0355849536989298, 0.0444584005407413, -0.02921326657235672, -0.012188115519191323, -0.045623323906724536, 0.029843339338222672, 0.014468163620196619, 1.106388002986316, 0.0244839262260083, -0.019066803370211226, 0.04206601698171766, 0.029256212250098886, 0.024579615440707088, 0.04313840032322668, -0.01724952090030144, 0.04049408097067237, -0.019102582513547284, -0.02179092070559161, 0.021909290483853393, 0.04468611179936702, -0.002754296903856515, -0.008373504214850705, 0.020497930633204542, 0.011541734350234808, 0.003935372818970251, 0.004704572144335838, -0.030837746017004248, -0.005398266625524906, -0.003775309586013237, 0.015979583071079367, 0.022258387237330323, -0.009358268714636336, 0.016586828862949734, -0.036209937856077686, -0.007069813564889092, 0.018769228691789833, 0.015776163172738607, 0.027060084585804264, 0.03482058176282983, 0.01712497139204919, 0.0244839262260083, 1.070267983871767, -0.008365158103939346, 0.02999495382282703, -0.022352082337442212, 0.004228490511232141, 0.03232105820264578, -0.026606908293792284, 0.039031448539106645, 0.008948538645558262, -0.008024942376751845, -9.47314479165281e-05, 0.03420666744304952, -0.01062262537476499, 0.001145057395861743, -0.010423063173181922, -0.02655963396459424, -0.041768533875756644, 0.04509977033320344, 0.04996670863541165, -0.022066737259668515, -0.007167158118193257, -0.04578757511185807, 0.0007582486630868411, -0.024614272831547695, 0.050038045502453374, -0.007244249358861834, 0.010234494432862005, 0.0016795204060041377, -0.03671398357119572, -0.04388788034686903, 0.004632400659007064, -0.039611479375910794, -0.019066803370211226, -0.008365158103939346, 1.0195935008868764, -0.0005275176293399202, 0.008695734790628237, -0.0013213765962543816, 0.037229142898142456, 0.017777671084277785, 0.010194948307220113, 0.004708615666386525, -0.03556510650819759, -0.017163135888978623, -0.04528175122246597, 0.003991678192911777, -0.01900809203592703, 0.01578834275991937, 0.016463073917441458, 0.0028265710597574667, 0.02116836827741894, -0.005791998504288229, 0.023148107035130403, -0.008649233798873085, 0.0018272616482163883, 0.004110997042733021, 0.0360093392220409, 0.03941031669348979, 0.034697723667848436, 0.02460185162389984, 0.030092280151602535, 0.0069029610694028715, 0.045545541999137025, -0.0033323023025640447, 0.013445337746708018, 0.04206601698171766, 0.02999495382282703, -0.0005275176293399202, 1.0935067102959475, -0.029456315925702563, 0.0053737505538870465, 0.04730718717121342, 0.0192922759206638, 0.039805297976720916, 0.02855186381480143, 0.041993336693883526, -0.028512371716481313, 0.04510570716374943, 0.026992438670856583, -0.0003557836132164896, 0.017698004903454755, 0.012716779014912114, 0.0441580769795837, -0.04304892857723624, -0.04036942251863751, -0.020554948819090407, 0.012286390903939988, 0.02565877439835006, 0.03453087968495973, -0.005815542055064995, -0.03471954626885602, -0.010796863193762008, 0.037994492545985324, -0.01013150777529086, -0.028104499976935073, 0.027054364810051548, 0.031277036167648486, 0.02163138058950182, 0.029256212250098886, -0.022352082337442212, 0.008695734790628237, -0.029456315925702563, 1.109212305263825, -0.04224929129534128, 0.049035753310603156, -0.027700822087286494, -0.0204134677557458, -0.014466690268406041, 0.04391817761048035, 0.014634736824445759, -0.03995438335206818, 0.001465245336167191, 0.02266696183829913, -0.004925178719709463, -0.004439251365028131, 0.04449482260856929, -0.032298973880251367, 0.012369779931064171, -0.031820179647955936, 0.011461035531280675, -0.030201209299937214, -0.038886156890715645, 0.027110271482892634, 0.04136170444063684, -0.03470602305483192, 0.03003548432464611, -0.031109091958393946, 0.03328507491844352, -0.040011339291041566, 0.04013846721174865, -0.019306731187669103, 0.024579615440707088, 0.004228490511232141, -0.0013213765962543816, 0.0053737505538870465, -0.04224929129534128, 1.1099579177436072, 0.022231897594417828, 0.03921167793284729, -0.022685469862012413, 0.04488666474613754, 0.03203370644906725, -0.052118403370466464, -0.026492772696670174, 0.03191514132215131, 0.03413508950052036, 0.018052309614998967, -0.004097837456739825, 0.027269247064219914, -0.026355833159226207, 0.019968664950621013, 0.030011148263626188, 0.002639897953416871, -0.025968917517985426, 0.04277442752917602, 0.01385506217807305, 0.031249232960788607, -0.01938421213109109, 0.030345740730211505, 0.03343989667589811, 0.022665188428897233, 0.03355911255626865, 0.038040192747288114, 0.010991105715902552, 0.04313840032322668, 0.03232105820264578, 0.037229142898142456, 0.04730718717121342, 0.049035753310603156, 0.022231897594417828, 1.1100773707547817, 0.03325718713941305, 0.04303293973245551, 0.013998592464822652, -0.02658863717198395, -0.01867791469026266, 0.04052278400198545, 0.015801417256640773, -0.020393686798330746, 0.0005365990987257105, 0.030781007948951788, -0.01066994238434305, -0.020751593936883726, 0.0025662618102064907, 0.03765123812365831, -0.027911277372101344, -0.020795081379056887, -0.01445564772838424, 0.04083263513574747, 0.03989096618788913, -0.018242749745817282, 0.041242097052525226, 0.02731888661866346, 0.0045426957390751746, -0.028428671678423244, -0.007769954525265398, 0.004225755130927113, -0.01724952090030144, -0.026606908293792284, 0.017777671084277785, 0.0192922759206638, -0.027700822087286494, 0.03921167793284729, 0.03325718713941305, 1.1109021182139802, -0.023803693674604543, 0.0449968844854073, 0.030598084449387653, -0.03822225093294441, 0.045926726582070275, -0.038754651637463555, 0.02810216065871144, 0.013555768477740818, 0.010341041029588093, 0.00414563519633471, 0.02659604243989747, 0.023556328928534955, -0.03408042706432178, -0.007345242684685044, -0.02680273415802167, 0.0322982821968645, -0.04306046355568722, 0.04403429888837729, -0.04316161464510363, 0.04387822506403151, 0.04002496218479192, -0.012470789580005071, -0.030653098363687886, 0.036950273135133826, -0.04191127195725435, 0.04049408097067237, 0.039031448539106645, 0.010194948307220113, 0.039805297976720916, -0.0204134677557458, -0.022685469862012413, 0.04303293973245551, -0.023803693674604543, 1.1167397445242342, 0.03839755469405935, -0.024266776786321134, -0.04872377485138497, -0.03669845942119648, 0.0005855890202716126, -0.006367785344653989, -0.012460031956474181, 0.004400521895359284, -0.03952534636829865, 0.045591904604812473, 0.04862276595617193, -0.037471871915213784, -0.004066718016894244, -0.040855208130067384, -0.03352031341643597, 0.03180289830669866, 0.05029573059747787, -0.027782664771231234, -0.021844028115744235, -0.0178864176645816, 0.024913728365545125, -0.03531254690762554, 0.02887196875203289, -0.030630844016381484, -0.019102582513547284, 0.008948538645558262, 0.004708615666386525, 0.02855186381480143, -0.014466690268406041, 0.04488666474613754, 0.013998592464822652, 0.0449968844854073, 0.03839755469405935, 1.1111316330850178, -0.021344948382981593, -0.06602179098603778, -0.03145738339283898, -0.011992800048999745, -0.017746023074299448, 0.009518363727390114, -0.004485837429479993, 0.03088529602551772, 0.03146674243923933, 0.0368591861899902, 0.017442693715043305, -0.018423159653141275, 0.036971895593493335, 0.03982225451870097, -0.01912282640823651, 0.044933930411813525, -0.046846579080942224, -0.018593918359548715, 0.032752891116691864, -0.028394969552942472, 0.037509161544747864, 0.032107422417384575, -0.007630331061892353, -0.02179092070559161, -0.008024942376751845, -0.03556510650819759, 0.041993336693883526, 0.04391817761048035, 0.03203370644906725, -0.02658863717198395, 0.030598084449387653, -0.024266776786321134, -0.021344948382981593, 1.1180661278748028, -0.007608924861036971, -0.045908370143790594, 0.007974129659104358, -0.007003904227375312, 0.015297232755580283, 0.0012148709404703024, 0.03193607221056624, -0.049150203367552575, -0.05375573996100676, 0.014670346083215154, 0.015509827704018089, 0.05419721634911037, 0.043462507654258346, 0.01996718268764309, -0.052801366965945014, 0.03956237956187793, 0.0058817200023349074, 0.039339636455326926, 0.035346375921318104, 0.039510778328411295, -0.0301183560296715, 0.053979394171471906, 0.021909290483853393, -9.47314479165281e-05, -0.017163135888978623, -0.028512371716481313, 0.014634736824445759, -0.052118403370466464, -0.01867791469026266, -0.03822225093294441, -0.04872377485138497, -0.06602179098603778, -0.007608924861036971, 0.9455226942657213, 0.030208817696761397, 0.03351051362261738, 0.009180042903472513, -0.016516601672160795, 0.03648965918942879, -0.03908805799055766, -0.03044244302633583, -0.04308733943205684, 0.039962281457526616, -0.030363216654919242, -0.012402277227661523, -0.02806785861635476, 0.04002891645538309, -0.03202177489169103, -0.02771963040684473, 0.045363376126235755, 0.03040188472251433, 0.039300477151426295, -0.036318121741049, 0.012261712797160016, 0.018102760524646617, 0.04468611179936702, 0.03420666744304952, -0.04528175122246597, 0.04510570716374943, -0.03995438335206818, -0.026492772696670174, 0.04052278400198545, 0.045926726582070275, -0.03669845942119648, -0.03145738339283898, -0.045908370143790594, 0.030208817696761397, 1.1252825039276704;


        hops::Gaussian model(mean, cov);

        Eigen::VectorXd interiorPoint(cols);
        interiorPoint
                << 35.449418082282875, 57.87797141931204, 441.8244909070048, 59.11937122319777, -5.93290975259538, 34.60742055803782, 17.86505140268095, 101.16956825026217, 7.694704013893095, 17.157342020964457, 80.09644208336026, 1.1203796286592869, 11.635410807916797, 34.61942549591947, 11.230502040834503, 132.44620241303974, 595.9646130775759, 67.70092316070182, 185.39072784428328, 967.4276971056847, 2.426568544957617, 16.173259796836767, 63.86238568934168, 123.12420565722697, 0.0010000000005617434, 6.051254555384062, 0.0009999999995176647, 140.97076373430642, 28.846695070523836, 9.31109465326148, 104.79774313848831, 0.0009999999988324825, 52.5036023006801;

        auto mc = hops::MarkovChainAdapter(
                hops::MetropolisHastingsFilter(
                        hops::TruncatedGaussianProposal(A,
                                                        b,
                                                        interiorPoint,
                                                        model)
                )
        );

        hops::RandomNumberGenerator randomNumberGenerator(42);
        double num_samples = 25'000;
        for (int i = 0; i < num_samples; ++i) {
            auto[alpha, state] = mc.draw(randomNumberGenerator);
            BOOST_CHECK(std::isfinite(state(0)));
            BOOST_CHECK(std::isfinite(state(1)));
            BOOST_REQUIRE(((b - A * state).array() >= 0).all());
        }
    }

BOOST_AUTO_TEST_SUITE_END()
